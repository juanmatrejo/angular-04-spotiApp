{"ast":null,"code":"import { HttpHeaders, HttpParams } from \"@angular/common/http\";\nimport { map } from \"rxjs\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class SpotifyService {\n  constructor(_httpClient) {\n    this._httpClient = _httpClient;\n    this.spotifyToken = this.getToken();\n  }\n  getToken() {\n    //https://developer.spotify.com/documentation/general/guides/authorization/\n    //https://developer.spotify.com/documentation/general/guides/authorization/code-flow/\n    //https://developer.spotify.com/console/browse/\n    console.log('retrieving token');\n    const headers = new HttpHeaders().set('Content-Type', 'application/x-www-form-urlencoded');\n    const body = new HttpParams().set('grant_type', 'client_credentials').set('client_id', 'd6b55734aa3f4b49af89ae8023b6c69e').set('client_secret', '4659ca881ead4eed81c45197f071db34');\n    this._httpClient.post('https://accounts.spotify.com/api/token', body.toString(), {\n      headers: headers\n    }).subscribe(data => {\n      return new SpotifyToken(data.token_type, data.access_token);\n    });\n  }\n  getService(query) {\n    var _a, _b;\n    if (this.spotifyToken == null) {\n      console.log('getting token');\n      this.getToken();\n    }\n    // this.spotifyToken=new  SpotifyToken(\n    //     'Bearer',\n    //     'BQAuU56CgFcnxOT9PqADFVeQiQNal-QXwtzzqYGGikq4OI8g5KAZCwOLWldgtYdEt3EsnxmKm2LnFcxfbxrcAYsbQjF1zAGB-jaV3OvoIa23Cpbp_Avh'\n    // );\n    let serviceBase = `https://api.spotify.com/v1/${query}`;\n    const headers = new HttpHeaders().set('Authorization', `${(_a = this.spotifyToken) === null || _a === void 0 ? void 0 : _a.token_type} ${(_b = this.spotifyToken) === null || _b === void 0 ? void 0 : _b.access_token}`);\n    // const headers: HttpHeaders = new HttpHeaders().set('Authorization', `${this.spotifyToken?.token_type} ${this.spotifyToken?.access_token}`);\n    return this._httpClient.get(serviceBase, {\n      headers\n    });\n  }\n  getNewReleases() {\n    return this.getService('browse/new-releases?limit=40').pipe(map(data => {\n      return data['albums'].items;\n    }));\n  }\n  searchArtist(searchValue) {\n    let query = `search?q=${searchValue}&type=artist&limit=20`;\n    return this.getService(query).pipe(map(data => data['artists'].items));\n  }\n  getArtist(id) {\n    let query = `artists/${id}`;\n    return this.getService(query);\n  }\n  getTopTracks(id) {\n    let query = `artists/${id}/top-tracks?market=MX`;\n    return this.getService(query).pipe(data => {\n      return data;\n    });\n  }\n}\nSpotifyService.ɵfac = function SpotifyService_Factory(t) {\n  return new (t || SpotifyService)(i0.ɵɵinject(i1.HttpClient));\n};\nSpotifyService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: SpotifyService,\n  factory: SpotifyService.ɵfac,\n  providedIn: 'root'\n});\nexport class SpotifyToken {\n  constructor(type, token) {\n    this.token_type = type;\n    this.access_token = token;\n  }\n}","map":{"version":3,"mappings":"AAAA,SAAqBA,WAAW,EAAEC,UAAU,QAAQ,sBAAsB;AAE1E,SAASC,GAAG,QAAQ,MAAM;;;AAK1B,OAAM,MAAOC,cAAc;EAIvBC,YAAoBC,WAAuB;IAAvB,gBAAW,GAAXA,WAAW;IAE3B,IAAI,CAACC,YAAY,GAAG,IAAI,CAACC,QAAQ,EAAE;EACvC;EAEAA,QAAQ;IAEJ;IACA;IACA;IAEAC,OAAO,CAACC,GAAG,CAAC,kBAAkB,CAAC;IAE/B,MAAMC,OAAO,GAAgB,IAAIV,WAAW,EAAE,CAACW,GAAG,CAAC,cAAc,EAAE,mCAAmC,CAAC;IAEvG,MAAMC,IAAI,GAAe,IAAIX,UAAU,EAAE,CACpCU,GAAG,CAAC,YAAY,EAAE,oBAAoB,CAAC,CACvCA,GAAG,CAAC,WAAW,EAAE,kCAAkC,CAAC,CACpDA,GAAG,CAAC,eAAe,EAAE,kCAAkC,CAAC;IAE7D,IAAI,CAACN,WAAW,CAACQ,IAAI,CAAC,wCAAwC,EAAED,IAAI,CAACE,QAAQ,EAAE,EAAE;MAAEJ,OAAO,EAAEA;IAAO,CAAE,CAAC,CACjGK,SAAS,CAAEC,IAAS,IAAI;MAErB,OAAO,IAAIC,YAAY,CAACD,IAAI,CAACE,UAAU,EAAEF,IAAI,CAACG,YAAY,CAAC;IAC/D,CAAC,CAAC;EACV;EAEAC,UAAU,CAACC,KAAa;;IAEpB,IAAI,IAAI,CAACf,YAAY,IAAI,IAAI,EAAE;MAC3BE,OAAO,CAACC,GAAG,CAAC,eAAe,CAAC;MAC5B,IAAI,CAACF,QAAQ,EAAE;;IAGnB;IACA;IACA;IACA;IAEA,IAAIe,WAAW,GAAW,8BAA8BD,KAAK,EAAE;IAC/D,MAAMX,OAAO,GAAgB,IAAIV,WAAW,EAAE,CAACW,GAAG,CAAC,eAAe,EAAE,GAAG,UAAI,CAACL,YAAY,0CAAEY,UAAU,IAAI,UAAI,CAACZ,YAAY,0CAAEa,YAAY,EAAE,CAAC;IAC1I;IAEA,OAAO,IAAI,CAACd,WAAW,CAACkB,GAAG,CAACD,WAAW,EAAE;MAAEZ;IAAO,CAAE,CAAC;EACzD;EAEAc,cAAc;IAEV,OAAO,IAAI,CAACJ,UAAU,CAAC,8BAA8B,CAAC,CACjDK,IAAI,CAACvB,GAAG,CAAEc,IAAS,IAAI;MACpB,OAAOA,IAAI,CAAC,QAAQ,CAAC,CAACU,KAAK;IAC/B,CAAC,CAAC,CAAC;EACX;EAEAC,YAAY,CAACC,WAAmB;IAE5B,IAAIP,KAAK,GAAW,YAAYO,WAAW,uBAAuB;IAElE,OAAO,IAAI,CAACR,UAAU,CAACC,KAAK,CAAC,CACxBI,IAAI,CAACvB,GAAG,CAAEc,IAAS,IAAKA,IAAI,CAAC,SAAS,CAAC,CAACU,KAAK,CAAC,CAAC;EACxD;EAEAG,SAAS,CAACC,EAAU;IAEhB,IAAIT,KAAK,GAAW,WAAWS,EAAE,EAAE;IAEnC,OAAO,IAAI,CAACV,UAAU,CAACC,KAAK,CAAC;EACjC;EAEAU,YAAY,CAACD,EAAU;IAEnB,IAAIT,KAAK,GAAW,WAAWS,EAAE,uBAAuB;IAExD,OAAO,IAAI,CAACV,UAAU,CAACC,KAAK,CAAC,CACxBI,IAAI,CAAET,IAAS,IAAI;MAChB,OAAOA,IAAI;IACf,CAAC,CAAC;EACV;;;mBAjFSb,cAAc;AAAA;;SAAdA,cAAc;EAAA6B,SAAd7B,cAAc;EAAA8B,YAFX;AAAM;AAsFtB,OAAM,MAAOhB,YAAY;EAKrBb,YAAY8B,IAAY,EAAEC,KAAa;IACnC,IAAI,CAACjB,UAAU,GAAGgB,IAAI;IACtB,IAAI,CAACf,YAAY,GAAGgB,KAAK;EAC7B","names":["HttpHeaders","HttpParams","map","SpotifyService","constructor","_httpClient","spotifyToken","getToken","console","log","headers","set","body","post","toString","subscribe","data","SpotifyToken","token_type","access_token","getService","query","serviceBase","get","getNewReleases","pipe","items","searchArtist","searchValue","getArtist","id","getTopTracks","factory","providedIn","type","token"],"sourceRoot":"","sources":["C:\\JMTE\\Angular\\04-spotiApp\\src\\app\\services\\spotify.service.ts"],"sourcesContent":["import { HttpClient, HttpHeaders, HttpParams } from \"@angular/common/http\";\nimport { Injectable } from \"@angular/core\";\nimport { map } from \"rxjs\";\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class SpotifyService {\n\n    spotifyToken: SpotifyToken | null;\n\n    constructor(private _httpClient: HttpClient) {\n\n        this.spotifyToken = this.getToken();\n    }\n\n    getToken():SpotifyToken|any {\n\n        //https://developer.spotify.com/documentation/general/guides/authorization/\n        //https://developer.spotify.com/documentation/general/guides/authorization/code-flow/\n        //https://developer.spotify.com/console/browse/\n\n        console.log('retrieving token');\n\n        const headers: HttpHeaders = new HttpHeaders().set('Content-Type', 'application/x-www-form-urlencoded');\n\n        const body: HttpParams = new HttpParams()\n            .set('grant_type', 'client_credentials')\n            .set('client_id', 'd6b55734aa3f4b49af89ae8023b6c69e')\n            .set('client_secret', '4659ca881ead4eed81c45197f071db34');\n\n        this._httpClient.post('https://accounts.spotify.com/api/token', body.toString(), { headers: headers })\n            .subscribe((data: any) => {\n\n                return new SpotifyToken(data.token_type, data.access_token);\n            });\n    }\n\n    getService(query: string) {\n\n        if (this.spotifyToken == null) {\n            console.log('getting token');\n            this.getToken();\n        }\n\n        // this.spotifyToken=new  SpotifyToken(\n        //     'Bearer',\n        //     'BQAuU56CgFcnxOT9PqADFVeQiQNal-QXwtzzqYGGikq4OI8g5KAZCwOLWldgtYdEt3EsnxmKm2LnFcxfbxrcAYsbQjF1zAGB-jaV3OvoIa23Cpbp_Avh'\n        // );\n\n        let serviceBase: string = `https://api.spotify.com/v1/${query}`;\n        const headers: HttpHeaders = new HttpHeaders().set('Authorization', `${this.spotifyToken?.token_type} ${this.spotifyToken?.access_token}`);\n        // const headers: HttpHeaders = new HttpHeaders().set('Authorization', `${this.spotifyToken?.token_type} ${this.spotifyToken?.access_token}`);\n\n        return this._httpClient.get(serviceBase, { headers });\n    }\n\n    getNewReleases() {\n\n        return this.getService('browse/new-releases?limit=40')\n            .pipe(map((data: any) => {\n                return data['albums'].items;\n            }));\n    }\n\n    searchArtist(searchValue: string) {\n\n        let query: string = `search?q=${searchValue}&type=artist&limit=20`;\n\n        return this.getService(query)\n            .pipe(map((data: any) => data['artists'].items));\n    }\n\n    getArtist(id: string) {\n\n        let query: string = `artists/${id}`;\n\n        return this.getService(query);\n    }\n\n    getTopTracks(id: string) {\n\n        let query: string = `artists/${id}/top-tracks?market=MX`;\n\n        return this.getService(query)\n            .pipe((data: any) => {\n                return data;\n            });\n    }\n}\n\nexport class SpotifyToken {\n\n    token_type: string;\n    access_token: string;\n\n    constructor(type: string, token: string) {\n        this.token_type = type;\n        this.access_token = token;\n    }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}