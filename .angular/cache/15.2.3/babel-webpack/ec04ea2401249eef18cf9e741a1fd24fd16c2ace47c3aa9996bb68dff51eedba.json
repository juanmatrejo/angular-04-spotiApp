{"ast":null,"code":"import { HttpHeaders, HttpParams } from \"@angular/common/http\";\nimport { map } from \"rxjs\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class SpotifyService {\n  constructor(_httpClient) {\n    this._httpClient = _httpClient;\n    this.spotifyToken = new SpotifyToken('', '');\n    this.getToken();\n    console.log(new Date());\n    setTimeout(() => {}, 15000);\n    console.log(new Date());\n  }\n  getToken() {\n    //https://developer.spotify.com/documentation/general/guides/authorization/\n    //https://developer.spotify.com/documentation/general/guides/authorization/code-flow/\n    //https://developer.spotify.com/console/browse/\n    const headers = new HttpHeaders().set('Content-Type', 'application/x-www-form-urlencoded');\n    const body = new HttpParams().set('grant_type', 'client_credentials').set('client_id', 'd6b55734aa3f4b49af89ae8023b6c69e').set('client_secret', '4659ca881ead4eed81c45197f071db34');\n    this._httpClient.post('https://accounts.spotify.com/api/token', body.toString(), {\n      headers: headers\n    }).subscribe(data => {\n      this.spotifyToken = new SpotifyToken(data.token_type, data.access_token);\n    });\n  }\n  getService(query) {\n    let serviceBase = `https://api.spotify.com/v1/${query}`;\n    const headers = new HttpHeaders().set('Authorization', `${this.spotifyToken.token_type} ${this.spotifyToken.access_token}`);\n    // return this._httpClient.get(serviceBase, { headers });\n    var result = this._httpClient.get(serviceBase, {\n      headers\n    });\n    console.log(result);\n    return result;\n  }\n  getNewReleases() {\n    return this.getService('browse/new-releases?limit=40').pipe(map(data => {\n      return data['albums'].items;\n    }));\n  }\n  searchArtist(searchValue) {\n    let query = `search?q=${searchValue}&type=artist&limit=20`;\n    return this.getService(query).pipe(map(data => data['artists'].items));\n  }\n  getArtist(id) {\n    let query = `artists/${id}`;\n    return this.getService(query);\n  }\n  getTopTracks(id) {\n    let query = `artists/${id}/top-tracks?market=MX`;\n    return this.getService(query).pipe(data => {\n      return data;\n    });\n  }\n}\nSpotifyService.ɵfac = function SpotifyService_Factory(t) {\n  return new (t || SpotifyService)(i0.ɵɵinject(i1.HttpClient));\n};\nSpotifyService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: SpotifyService,\n  factory: SpotifyService.ɵfac,\n  providedIn: 'root'\n});\nexport class SpotifyToken {\n  constructor(type, token) {\n    this.token_type = type;\n    this.access_token = token;\n  }\n}","map":{"version":3,"mappings":"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","names":["HttpHeaders","HttpParams","map","SpotifyService","constructor","_httpClient","SpotifyToken","getToken","console","log","Date","setTimeout","headers","set","body","post","toString","subscribe","data","spotifyToken","token_type","access_token","getService","query","serviceBase","result","get","getNewReleases","pipe","items","searchArtist","searchValue","getArtist","id","getTopTracks","factory","providedIn","type","token"],"sourceRoot":"","sources":["C:\\JMTE\\Angular\\04-spotiApp\\src\\app\\services\\spotify.service.ts"],"sourcesContent":["import { HttpClient, HttpHeaders, HttpParams } from \"@angular/common/http\";\nimport { Injectable } from \"@angular/core\";\nimport { delay, map } from \"rxjs\";\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class SpotifyService {\n\n    spotifyToken: SpotifyToken = new SpotifyToken('', '');\n\n    constructor(private _httpClient: HttpClient) {\n        this.getToken();\n        console.log(new Date());\n        setTimeout(() => {\n        }, 15000);\n        console.log(new Date());\n    }\n\n    getToken() {\n\n        //https://developer.spotify.com/documentation/general/guides/authorization/\n        //https://developer.spotify.com/documentation/general/guides/authorization/code-flow/\n        //https://developer.spotify.com/console/browse/\n\n        const headers: HttpHeaders = new HttpHeaders().set('Content-Type', 'application/x-www-form-urlencoded');\n\n        const body: HttpParams = new HttpParams()\n            .set('grant_type', 'client_credentials')\n            .set('client_id', 'd6b55734aa3f4b49af89ae8023b6c69e')\n            .set('client_secret', '4659ca881ead4eed81c45197f071db34');\n\n        this._httpClient.post('https://accounts.spotify.com/api/token', body.toString(), { headers: headers })\n            .subscribe((data: any) => {\n\n                this.spotifyToken = new SpotifyToken(data.token_type, data.access_token);\n            });\n    }\n\n    getService(query: string) {\n\n        let serviceBase: string = `https://api.spotify.com/v1/${query}`;\n        const headers: HttpHeaders = new HttpHeaders().set('Authorization', `${this.spotifyToken.token_type} ${this.spotifyToken.access_token}`);\n\n        // return this._httpClient.get(serviceBase, { headers });\n        var result = this._httpClient.get(serviceBase, { headers });\n        console.log(result);\n        return result;\n    }\n\n    getNewReleases() {\n\n        return this.getService('browse/new-releases?limit=40')\n            .pipe(map((data: any) => {\n                return data['albums'].items;\n            }));\n    }\n\n    searchArtist(searchValue: string) {\n\n        let query: string = `search?q=${searchValue}&type=artist&limit=20`;\n\n        return this.getService(query)\n            .pipe(map((data: any) => data['artists'].items));\n    }\n\n    getArtist(id: string) {\n\n        let query: string = `artists/${id}`;\n\n        return this.getService(query);\n    }\n\n    getTopTracks(id: string) {\n\n        let query: string = `artists/${id}/top-tracks?market=MX`;\n\n        return this.getService(query)\n            .pipe((data: any) => {\n                return data;\n            });\n    }\n}\n\nexport class SpotifyToken {\n\n    token_type: string;\n    access_token: string;\n\n    constructor(type: string, token: string) {\n        this.token_type = type;\n        this.access_token = token;\n    }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}