{"ast":null,"code":"import { HttpHeaders, HttpParams } from '@angular/common/http';\nimport { map } from 'rxjs/operators';\nimport { text } from 'node:stream/consumers';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class SpotifyService {\n  constructor(_httpClient) {\n    this._httpClient = _httpClient;\n    console.log('_spotifyService ready!!');\n  }\n  getToken() {\n    //https://developer.spotify.com/documentation/general/guides/authorization/\n    //https://developer.spotify.com/documentation/general/guides/authorization/code-flow/\n    //https://developer.spotify.com/console/browse/\n    const headers = new HttpHeaders().set('Content-Type', 'application/x-www-form-urlencoded');\n    const body = new HttpParams().set('grant_type', 'client_credentials').set('client_id', 'd6b55734aa3f4b49af89ae8023b6c69e').set('client_secret', '4659ca881ead4eed81c45197f071db34');\n    this._httpClient.post('https://accounts.spotify.com/api/token', body.toString(), {\n      headers: headers\n    }).subscribe(data => {\n      const spotifyToken = new SpotifyToken(data.token_type, data.access_token);\n      localStorage.setItem('spotifyToken', JSON.stringify(spotifyToken));\n    });\n    // this._httpClient.post('https://accounts.spotify.com/api/token', body.toString(), { headers: headers })\n    // .subscribe((data: any) => {\n    //     this.token = `${data.token_type} ${data.access_token}`;\n    //     console.log('token ready!!');\n    //     console.log(this.token);\n    // });\n  }\n\n  getService(query) {\n    const serviceBase = `https://api.spotify.com/v1/${query}`;\n    const tokenValue = localStorage.getItem('spotifyToken');\n    if (tokenValue == null) {\n      console.log('getting token');\n      this.getToken();\n    }\n    console.log(tokenValue);\n    const spotifyToken = JSON.parse(tokenValue.toString(text));\n    // const headers: HttpHeaders = new HttpHeaders().set('Authorization', `${spotifyToken.token_type} ${spotifyToken.access_token}`);\n    return this._httpClient.get(serviceBase);\n    // return this._httpClient.get(serviceBase, { headers });\n  }\n\n  getNewReleases() {\n    console.log('releases service...');\n    return this.getService('browse/new-releases?limit=40').pipe(map(data => {\n      return data['albums'].items;\n    }));\n  }\n  searchArtist(searchValue) {\n    console.log('searching service...');\n    console.log(searchValue);\n    let query = `search?q=${searchValue}&type=artist&limit=20`;\n    return this.getService(query).pipe(map(data => data['artists'].items));\n  }\n  getArtist(id) {\n    console.log('id service...');\n    console.log(id);\n    let query = `artists/${id}`;\n    return this.getService(query);\n    // .pipe((data: any) => data['artists'].items);\n  }\n\n  getTopTracks(id) {\n    console.log('top tracks service');\n    console.log(id);\n    let query = `artists/${id}/top-tracks?market=MX`;\n    return this.getService(query).pipe(data => {\n      console.log(data);\n      return data;\n    });\n  }\n}\nSpotifyService.ɵfac = function SpotifyService_Factory(t) {\n  return new (t || SpotifyService)(i0.ɵɵinject(i1.HttpClient));\n};\nSpotifyService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: SpotifyService,\n  factory: SpotifyService.ɵfac,\n  providedIn: 'root'\n});\nexport class SpotifyToken {\n  constructor(type, token) {\n    this.token_type = type;\n    this.access_token = token;\n  }\n}","map":{"version":3,"mappings":"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","names":["HttpHeaders","HttpParams","map","text","SpotifyService","constructor","_httpClient","console","log","getToken","headers","set","body","post","toString","subscribe","data","spotifyToken","SpotifyToken","token_type","access_token","localStorage","setItem","JSON","stringify","getService","query","serviceBase","tokenValue","getItem","parse","get","getNewReleases","pipe","items","searchArtist","searchValue","getArtist","id","getTopTracks","factory","providedIn","type","token"],"sourceRoot":"","sources":["C:\\JMTE\\Angular\\04-spotiApp\\src\\app\\services\\spotify.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams, HttpRequest } from '@angular/common/http';\nimport { map } from 'rxjs/operators';\nimport { text } from 'node:stream/consumers';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class SpotifyService {\n\n    constructor(private _httpClient: HttpClient) {\n\n        console.log('_spotifyService ready!!');\n    }\n\n    getToken() {\n\n        //https://developer.spotify.com/documentation/general/guides/authorization/\n        //https://developer.spotify.com/documentation/general/guides/authorization/code-flow/\n        //https://developer.spotify.com/console/browse/\n\n        const headers: HttpHeaders = new HttpHeaders().set('Content-Type', 'application/x-www-form-urlencoded');\n\n        const body: HttpParams = new HttpParams()\n            .set('grant_type', 'client_credentials')\n            .set('client_id', 'd6b55734aa3f4b49af89ae8023b6c69e')\n            .set('client_secret', '4659ca881ead4eed81c45197f071db34');\n\n        this._httpClient.post('https://accounts.spotify.com/api/token', body.toString(), { headers: headers })\n            .subscribe((data: any) => {\n\n                const spotifyToken: SpotifyToken = new SpotifyToken(data.token_type, data.access_token);\n                localStorage.setItem('spotifyToken', JSON.stringify(spotifyToken));\n            });\n\n        // this._httpClient.post('https://accounts.spotify.com/api/token', body.toString(), { headers: headers })\n        // .subscribe((data: any) => {\n\n        //     this.token = `${data.token_type} ${data.access_token}`;\n\n        //     console.log('token ready!!');\n        //     console.log(this.token);\n        // });\n    }\n\n    getService(query: string) {\n\n        const serviceBase: string = `https://api.spotify.com/v1/${query}`;\n        const tokenValue = localStorage.getItem('spotifyToken');\n\n        if (tokenValue == null) {\n            console.log('getting token');\n            this.getToken();\n        }\nconsole.log(tokenValue);\n        const spotifyToken = JSON.parse(tokenValue.toString(text));\n        // const headers: HttpHeaders = new HttpHeaders().set('Authorization', `${spotifyToken.token_type} ${spotifyToken.access_token}`);\n\n        return this._httpClient.get(serviceBase);\n        // return this._httpClient.get(serviceBase, { headers });\n    }\n\n    getNewReleases() {\n\n        console.log('releases service...');\n\n        return this.getService('browse/new-releases?limit=40')\n            .pipe(map((data: any) => {\n                return data['albums'].items;\n            }));\n    }\n\n    searchArtist(searchValue: string) {\n\n        console.log('searching service...');\n        console.log(searchValue);\n\n        let query: string = `search?q=${searchValue}&type=artist&limit=20`;\n\n        return this.getService(query)\n            .pipe(map((data: any) => data['artists'].items));\n    }\n\n    getArtist(id: string) {\n\n        console.log('id service...');\n        console.log(id);\n\n        let query: string = `artists/${id}`;\n\n        return this.getService(query);\n        // .pipe((data: any) => data['artists'].items);\n    }\n\n    getTopTracks(id: string) {\n\n        console.log('top tracks service');\n        console.log(id);\n\n        let query: string = `artists/${id}/top-tracks?market=MX`;\n\n        return this.getService(query)\n            .pipe((data: any) => {\n                console.log(data);\n                return data;\n            });\n    }\n}\n\nexport class SpotifyToken {\n\n    token_type: string;\n    access_token: string;\n\n    constructor(type: string, token: string) {\n        this.token_type = type;\n        this.access_token = token;\n    }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}